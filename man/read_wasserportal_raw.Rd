% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_wasserportal_raw.R
\name{read_wasserportal_raw}
\alias{read_wasserportal_raw}
\title{Download and Read Data from wasserportal.berlin.de}
\usage{
read_wasserportal_raw(station,
  variables = get_wasserportal_variables(station),
  from_date = "2019-01-01")
}
\arguments{
\item{station}{station number, one of \itemize{
  \item{601: MPS Berlin-Spandauer-Schifffahrtskanal}
  \item{151: MPS Caprivibruecke}
  \item{153: MPS Charlottenburg}
  \item{509: MPS Landwehrkanal}
  \item{504: MPS Neukoellner Schifffahrtskanal}
  \item{414: MPS Teltowkanal}
  \item{141: MS Muehlendammschleuse}
  \item{111: MS Rahnsdorf}
  \item{211: MS Schmoeckwitz}
  \item{161: MS Sophienwerder}
  \item{421: MS Teltow-Werft}
}}

\item{variables}{vector of variable identifiers, each being one of \itemize{
  \item{"t": Wassertemperatur}
  \item{"l": Leitfaehigkeit}
  \item{"p": pH_Wert}
  \item{"o": Sauerstoffgehalt}
  \item{"s": Sauerstoffsaettigung}
}}

\item{from_date}{\code{Date} object (or string in format "yyyy-mm-dd" that 
can be converted to a \code{Date} object representing the first day for
which to request data}
}
\value{
data frame read from the CSV file that the download provides. 
  IMPORTANT: It is not yet clear how to interpret the timestamp, see example
}
\description{
Download and Read Data from wasserportal.berlin.de
}
\examples{
# Get a list of available water quality stations and variables
stations <- kwb.read::get_wasserportal_stations()
variables <- kwb.read::get_wasserportal_variables()

# Read the raw timeseries
temperature_raw <- kwb.read::read_wasserportal_raw(
  station = stations$MPS_Charlottenburg, 
  variables = c(variables$Sauerstoffgehalt, variables$Leitfaehigkeit), 
  from_date = "2019-03-01"
)

# Look at the first few records
head(temperature_raw)

# Check the metadata
kwb.utils::getAttribute(temperature_raw, "metadata")

# Set missing values to NA
temperature_raw[temperature_raw == -777] <- NA

# Look at the first few records again
head(temperature_raw)

# How to interpret the timestamp?
# Determine the days at which summer time starts and ends, respectivel
switches <- kwb.datetime::date_range_CEST(2019)

# Reformat to dd.mm.yyyy
switches <- kwb.datetime::reformatTimestamp(switches, "\%Y-\%m-\%d", "\%d.\%m.\%Y")

# Define a pattern to look for timestamps "around" the switches
pattern <- paste(switches, "0[1-4]", collapse = "|")

# Look at the data for these timestamps
temperature_raw[grepl(pattern, temperature_raw$Datum), ]

# The timestamps are not plausible, e.g. "31.03.2019 03:00" appears twice!
}
